 @GetMapping("/user")
  public ResponseEntity<String> getUserDetails(@AuthenticationPrincipal OAuth2User principal) {
      String name = principal.getAttribute("name");
      return ResponseEntity.ok("Logged in as: " + name);


package com.defect.tracker;

import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.crypto.factory.PasswordEncoderFactories;
import org.springframework.security.crypto.password.PasswordEncoder;

public class SecurityConfig extends WebSecurityConfigurerAdapter{
  @Override
  protected void configure(HttpSecurity http) throws Exception {
      http
              .authorizeRequests()
              .antMatchers("/api/v1/").authenticated()
              .anyRequest().permitAll()
              .and()
              .oauth2Login()
              .and()
              .logout()
              .logoutUrl("/logout")
              .logoutSuccessUrl("/")
              .invalidateHttpSession(true)
              .clearAuthentication(true)
              .deleteCookies("JSESSIONID");
  }
  @Override
  protected void configure(AuthenticationManagerBuilder auth) throws Exception {
      PasswordEncoder passwordEncoder = PasswordEncoderFactories.createDelegatingPasswordEncoder();
      auth
              .inMemoryAuthentication()
              .withUser("user")
              .password(passwordEncoder.encode("password"))
              .roles("USER");
  }